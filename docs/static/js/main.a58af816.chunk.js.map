{"version":3,"sources":["constants.js","helpers.js","madlibs.js","components/QuestionField/QuestionField.js","components/QuestionList/QuestionList.js","components/EssayPreview/EssaySentence.js","components/EssayPreview/EssayPreview.js","components/Button/Button.js","components/EssayEditor/EssayEditor.js","components/App.js","index.js"],"names":["FIELD_NAMES","COPY","FIELDS","getTextTemplates","fieldName","makeUpperCase","str","charAt","toUpperCase","slice","INITIAL_STATE","fieldOrder","fieldAnswers","essayText","submitEssay","essay","type","payload","require","QuestionField","name","question","answer","handleBlur","defaultValue","onBlur","e","target","value","connect","dispatch","submitField","id","className","map","key","EssaySentence","fieldAnswer","templateIndex","split","start","end","length","showEditButton","Object","values","onClick","sentenceArray","replace","join","handleClick","Button","textContent","startOver","store","createStore","state","action","prevFieldAnswer","fieldNameNotChanged","availableTemplateSize","generateRandomIndex","Math","floor","random","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.a58af816.chunk.js","sourcesContent":["export const FIELD_NAMES = {\n  hometown: 'hometown',\n  favoriteFood: 'favoriteFood',\n  loveToDo: 'loveToDo',\n  music: 'music',\n  messageIf: 'messageIf',\n  bar: 'bar'\n};\n\nexport const COPY = {\n  [FIELD_NAMES.hometown]: 'Where did you grow up?',\n  [FIELD_NAMES.favoriteFood]: 'What’s your favorite food?',\n  [FIELD_NAMES.loveToDo]: 'What do you LOVE to do?',\n  [FIELD_NAMES.messageIf]: 'People should message you if they...',\n  [FIELD_NAMES.music]: 'What’s the last musician or band you got into?',\n  [FIELD_NAMES.bar]: 'What’s your favorite watering hole?'\n};\n\nexport const FIELDS = {\n  [FIELD_NAMES.hometown]: COPY[FIELD_NAMES.hometown],\n  [FIELD_NAMES.favoriteFood]: COPY[FIELD_NAMES.favoriteFood],\n  [FIELD_NAMES.loveToDo]: COPY[FIELD_NAMES.loveToDo],\n  [FIELD_NAMES.messageIf]: COPY[FIELD_NAMES.messageIf],\n  [FIELD_NAMES.music]: COPY[FIELD_NAMES.music],\n  [FIELD_NAMES.bar]: COPY[FIELD_NAMES.bar]\n};\n","import { FIELD_NAMES } from './constants';\n\nexport function getTextTemplates(fieldName) {\n  switch (fieldName) {\n    case FIELD_NAMES.hometown: {\n      return [\n        'Grew up in $answer.',\n        'Hail from $answer.',\n        '$answer born and bred.',\n        '$answer, born and raised.',\n        'Transplant from $answer.',\n        '$answer native.',\n        'Originally from $answer.'\n      ];\n    }\n\n    case FIELD_NAMES.favoriteFood: {\n      return [\n        'Can’t get enough $answer.',\n        'Addicted to $answer.',\n        'Obsessed with $answer.',\n        'Love going out for $answer.',\n        'Love eating $answer.',\n        'Can’t live without $answer.',\n        '$answer please.'\n      ];\n    }\n\n    case FIELD_NAMES.bar: {\n      return [\n        '$answer is my old haunt.',\n        '$answer is my Cheers.',\n        '$answer is my Paddy’s Pub.',\n        'You can always catch me at $answer.',\n        'Take me to $answer and I’ll marry you right now.',\n        '$answer is my spot.',\n        '$answer is my home-away-from-home.'\n      ];\n    }\n\n    case FIELD_NAMES.loveToDo: {\n      return [\n        'I $answer constantly.',\n        'Love to $answer.',\n        'Can never $answer enough.',\n        'I $answer whenever I get the chance.',\n        'In my spare time I $answer.'\n      ];\n    }\n\n    case FIELD_NAMES.music: {\n      return [\n        'I just got into $answer.',\n        'Been jamming to $answer recently.',\n        'I’d kill to see $answer live.',\n        'Love listening to $answer.',\n        '$answer is my new obsession.',\n        '$answer is my new god.'\n      ];\n    }\n\n    case FIELD_NAMES.messageIf: {\n      return [\n        'Message if you $answer.',\n        'Hit me up if you $answer.',\n        'If you $answer, we need to meet.',\n        'Send me a message if you $answer.',\n        'If you $answer, let’s chat.'\n      ];\n    }\n\n    default:\n      return [];\n  }\n}\n\nexport function makeUpperCase(str) {\n  return str.charAt(0).toUpperCase() + str.slice(1);\n}\n","import { FIELD_NAMES } from './constants';\n\nimport { getTextTemplates } from './helpers';\n\n// Action types\n// ----------------------------------------------------------------------------\n\nexport const SUBMIT_FIELD = 'MADLIBS.SUBMIT_FIELD';\nexport const SUBMIT_ESSAY = 'MADLIBS.SUBMIT_ESSAY';\nexport const START_OVER = 'MADLIBS.START_OVER';\n\n// Initial state\n// ----------------------------------------------------------------------------\n\nexport const INITIAL_STATE = {\n  fieldOrder: [\n    FIELD_NAMES.hometown,\n    FIELD_NAMES.favoriteFood,\n    FIELD_NAMES.loveToDo,\n    FIELD_NAMES.music,\n    FIELD_NAMES.messageIf,\n    FIELD_NAMES.bar\n  ],\n\n  fieldAnswers: {},\n  essayText: ''\n};\n\n// Reducer\n// ----------------------------------------------------------------------------\n\nexport function reducer(state = INITIAL_STATE, action) {\n  switch (action.type) {\n    case SUBMIT_FIELD: {\n      const {\n        payload: { answer, fieldName }\n      } = action;\n      const { fieldAnswers } = state;\n      const prevFieldAnswer = fieldAnswers[fieldName];\n      const fieldNameNotChanged = () =>\n        prevFieldAnswer && prevFieldAnswer.answer === answer;\n\n      if (!answer.length || fieldNameNotChanged()) return state;\n\n      const availableTemplateSize = getTextTemplates(fieldName).length;\n      const generateRandomIndex = Math.floor(\n        Math.random() * availableTemplateSize\n      );\n\n      return {\n        ...state,\n        fieldAnswers: {\n          ...fieldAnswers,\n          [fieldName]: {\n            answer: answer,\n            templateIndex: generateRandomIndex\n          }\n        }\n      };\n    }\n\n    case SUBMIT_ESSAY: {\n      const {\n        payload: { essay }\n      } = action;\n      return {\n        ...state,\n        essayText: essay\n      };\n    }\n\n    case START_OVER: {\n      return {\n        ...INITIAL_STATE\n      };\n    }\n\n    default:\n      return state;\n  }\n}\n\n// Action creators\n// ----------------------------------------------------------------------------\n\nexport function submitField({ id, answer }) {\n  return { type: SUBMIT_FIELD, payload: { fieldName: id, answer } };\n}\n\nexport function submitEssay(essay) {\n  return { type: SUBMIT_ESSAY, payload: { essay } };\n}\n\nexport function startOver() {\n  return { type: START_OVER };\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nrequire('./QuestionField.scss');\n\nexport const QuestionField = ({ name, question, answer, handleBlur }) => (\n  <li>\n    <label>\n      <div>{question}</div>\n      <input\n        type='text'\n        defaultValue={answer}\n        onBlur={e => handleBlur(name, e.target.value)}\n      />\n    </label>\n  </li>\n);\n\nQuestionField.propTypes = {\n  name: PropTypes.string.isRequired,\n  question: PropTypes.string.isRequired,\n  answer: PropTypes.object,\n  handleBlur: PropTypes.func.isRequired\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\n\nimport { FIELDS } from '../../constants';\nimport { submitField } from '../../madlibs';\nimport { QuestionField } from '../QuestionField/QuestionField';\n\nimport './QuestionList.scss';\n\nconst QuestionList = ({ fieldOrder, fieldAnswers, submitField }) => (\n  <div className='QuestionList__Container'>\n    <h1>About Me</h1>\n    <ul>\n      {fieldOrder.map(name => (\n        <QuestionField\n          key={name}\n          name={name}\n          question={FIELDS[name]}\n          answer={fieldAnswers[name]}\n          handleBlur={submitField}\n        />\n      ))}\n    </ul>\n  </div>\n);\n\nQuestionList.propTypes = {\n  fieldOrder: PropTypes.array.isRequired,\n  fieldAnswers: PropTypes.object.isRequired,\n  submitField: PropTypes.func.isRequired\n};\n\nfunction mapStateToProps({ fieldOrder, fieldAnswers }) {\n  return {\n    fieldOrder,\n    fieldAnswers\n  };\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    submitField: (fieldName, answer) =>\n      dispatch(submitField({ id: fieldName, answer }))\n  };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(QuestionList);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { getTextTemplates, makeUpperCase } from '../../helpers';\n\nexport const EssaySentence = ({ fieldName, fieldAnswer }) => {\n  if (!fieldAnswer) return null;\n  const { answer, templateIndex } = fieldAnswer;\n  const line = getTextTemplates(fieldName)[templateIndex];\n  const [start, end] = line.split('$answer');\n\n  return (\n    <>\n      {start}\n      <strong>{start.length ? answer : makeUpperCase(answer)}</strong>\n      {end + ' '}\n    </>\n  );\n};\n\nEssaySentence.propTypes = {\n  fieldName: PropTypes.string.isRequired,\n  fieldAnswer: PropTypes.object\n};\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\n\nimport { EssaySentence } from './EssaySentence';\nimport { getTextTemplates, makeUpperCase } from '../../helpers';\nimport { submitEssay } from '../../madlibs';\n\nimport './EssayPreview.scss';\n\nconst EssayPreview = ({ fieldOrder, fieldAnswers, submitEssay }) => {\n  const handleClick = () => {\n    const sentenceArray = fieldOrder.map(fieldName => {\n      const { answer, templateIndex } = fieldAnswers[fieldName];\n      const template = getTextTemplates(fieldName)[templateIndex];\n      const line = template.replace('$answer', answer);\n\n      return makeUpperCase(line);\n    });\n    submitEssay(sentenceArray.join(' '));\n  };\n\n  const showEditButton =\n    fieldOrder.length === Object.values(fieldAnswers).length;\n\n  return (\n    <div className='EssayPreview__Container'>\n      <h1>Your essay text</h1>\n      <div className='EssayPreview__Sentences'>\n        {fieldOrder.map(name => (\n          <EssaySentence\n            key={name}\n            fieldAnswer={fieldAnswers[name]}\n            fieldName={name}\n          />\n        ))}\n      </div>\n      {showEditButton && <button onClick={() => handleClick()}>Edit</button>}\n    </div>\n  );\n};\n\nEssayPreview.propTypes = {\n  fieldOrder: PropTypes.array.isRequired,\n  fieldAnswers: PropTypes.object.isRequired,\n  submitEssay: PropTypes.func.isRequired\n};\n\nfunction mapStateToProps({ fieldOrder, fieldAnswers }) {\n  return {\n    fieldOrder,\n    fieldAnswers\n  };\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    submitEssay: essay => dispatch(submitEssay(essay))\n  };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(EssayPreview);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport './Button.scss';\n\nexport const Button = ({ textContent, handleClick }) => (\n  <button onClick={() => handleClick()}>{textContent}</button>\n);\n\nButton.propTypes = {\n  textContent: PropTypes.string.isRequired,\n  handleClick: PropTypes.func.isRequired\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { Button } from '../Button/Button';\nimport { startOver, submitEssay } from '../../madlibs';\n\nrequire('./EssayEditor.scss');\n\nconst EssayEditor = ({ essayText, startOver, submitEssay }) => (\n  <div className='EssayEditor__Container'>\n    <h1>Your essay text</h1>\n    <textarea\n      defaultValue={essayText}\n      onBlur={e => submitEssay(e.target.value)}\n    />\n    <Button handleClick={() => startOver()} textContent='Start over' />\n  </div>\n);\n\nEssayEditor.propTypes = {\n  essayText: PropTypes.string.isRequired,\n  startOver: PropTypes.func.isRequired,\n  submitEssay: PropTypes.func.isRequired\n};\n\nfunction mapStateToProps({ essayText }) {\n  return {\n    essayText\n  };\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    startOver: () => dispatch(startOver()),\n    submitEssay: essay => dispatch(submitEssay(essay))\n  };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(EssayEditor);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\n\nimport QuestionList from './QuestionList/QuestionList';\nimport EssayPreview from './EssayPreview/EssayPreview';\nimport EssayEditor from './EssayEditor/EssayEditor';\n\nimport './App.scss';\n\nconst App = ({ essayText }) => (\n  <div className='matchArea'>\n    {essayText.length ? (\n      <EssayEditor />\n    ) : (\n      <>\n        <QuestionList />\n        <EssayPreview />\n      </>\n    )}\n  </div>\n);\n\nApp.propTypes = {\n  essayText: PropTypes.string.isRequired\n};\n\nfunction mapStateToProps({ essayText }) {\n  return {\n    essayText\n  };\n}\n\nexport default connect(mapStateToProps)(App);\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore } from 'redux';\nimport { reducer } from './madlibs';\n\nimport App from './components/App';\n\nconst store = createStore(reducer);\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}